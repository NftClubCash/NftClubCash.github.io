{"version":3,"sources":["redux/blockchain/blockchainReducer.js","redux/nftData/nftDataReducer.js","redux/tokenData/tokenDataReducer.js","redux/store.js","redux/nftData/nftDataActions.js","redux/tokenData/tokenDataActions.js","redux/blockchain/blockchainActions.js","styles/globalStyles.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","loading","account","nftSmartContract","tokenSmartContract","web3","errorMsg","blockchainReducer","state","action","type","payload","mintedWithNftc","mintedWithBch","totalSupply","nftsToClaim","cost","error","nftDataReducer","tokensApproved","tokenBalance","tokenDataReducer","rootReducer","combineReducers","blockchain","nftData","tokenData","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchNftDataFailed","fetchNftData","_owner","dispatch","a","getState","methods","call","Number","whitelist","console","log","fetchTokenDataFailed","fetchTokenData","_spender","allowance","balanceOf","connectFailed","updateAccount","nftCa","Screen","styled","div","image","SpacerXSmall","SpacerSmall","SpacerMedium","SpacerLarge","Container","flex","fd","jc","ai","test","TextTitle","p","TextDescription","truncate","input","len","length","substring","Completionist","StyledButton","button","StyledRoundButton","ResponsiveWrapper","StyledImg","img","StyledLink","App","useDispatch","useSelector","useState","newToSmartBch","setNewToSmartBch","claimingNft","setClaimingNft","mintFeedback","setMintFeedback","mintAmount","setMintAmount","NFT_CONTRACT_ADDRESS","TOKEN_CONTRACT_ADDRESS","NFT_SCAN_LINK","TOKEN_SCAN_LINK","NETWORK","NAME","SYMBOL","ID","NFT_NAME","MAX_SUPPLY_BCH","MAX_SUPPLY_NFTC","MAX_SUPPLY","MAX_MINT_PER_TX","WEI_COST_BCH","DISPLAY_COST_BCH","WEI_COST_NFTC","DISPLAY_COST_NFTC","GAS_LIMIT","MARKETPLACE","MARKETPLACE_LINK","SHOW_BACKGROUND","LAUNCH_DATE","END_DATE","CONFIG","SET_CONFIG","claimNFTsWithBCH","nftsLeft","costBch","gasLimit","totalCostBchWei","String","BigInt","totalGasLimit","Math","min","eth","getBalance","bchBalance","round","mint","send","to","from","value","once","err","then","receipt","getNftAndTokenData","getConfig","fetch","headers","Accept","configResponse","json","config","useEffect","style","padding","backgroundColor","isMobile","borderRadius","border","textAlign","color","paddingBottom","maxWidth","marginTop","src","alt","target","href","Date","fontSize","fontFamily","width","onClick","e","preventDefault","nftAbiResponse","nftAbi","tokenAbiResponse","tokenAbi","window","ethereum","isMetaMask","Web3EthContract","setProvider","Web3","request","method","accounts","nftSmartContractObj","tokenSmartContractObj","on","location","reload","params","chainId","utils","toHex","code","chainName","nativeCurrency","name","decimals","symbol","rpcUrls","RPC","fontWeight","lineHeight","disabled","newMintAmount","decrementMintAmount","onChange","parseInt","incrementMintAmount","toUTCString","className","date","margin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.739be838.chunk.js","sourcesContent":["const initialState = {\n  loading: false,\n  account: null,\n  nftSmartContract: null,\n  tokenSmartContract: null,\n  web3: null,\n  errorMsg: \"\",\n};\n\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECTION_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CONNECTION_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        nftSmartContract: action.payload.nftSmartContract,\n        tokenSmartContract: action.payload.tokenSmartContract,\n        web3: action.payload.web3,\n      };\n    case \"CONNECTION_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        errorMsg: action.payload,\n      };\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;\n","const initialState = {\n  loading: false,\n  mintedWithNftc: 0,\n  mintedWithBch: 0,\n  totalSupply: 0,\n  nftsToClaim: 0,\n  cost: 0,\n  error: false,\n  errorMsg: \"\",\n};\n\nconst nftDataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        mintedWithNftc: action.payload.mintedWithNftc,\n        mintedWithBch: action.payload.mintedWithBch,\n        totalSupply: action.payload.totalSupply,\n        nftsToClaim: action.payload.nftsToClaim,\n        // cost: action.payload.cost,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default nftDataReducer;\n","const initialState = {\n  loading: false,\n  tokensApproved: 0,\n  // bchBalance: 0,\n  tokenBalance: 0,\n  mintedWithNftc: 0,\n  mintedWithBch: 0,\n  totalSupply: 0,\n  error: false,\n  errorMsg: \"\",\n};\n\nconst tokenDataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        tokensApproved: action.payload.tokensApproved,\n        // bchBalance: action.payload.bchBalance,\n        tokenBalance: action.payload.tokenBalance,\n        mintedWithNftc: action.payload.mintedWithNftc,\n        mintedWithBch: action.payload.mintedWithBch,\n        totalSupply: action.payload.totalSupply,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default tokenDataReducer;\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport nftDataReducer from \"./nftData/nftDataReducer\";\nimport tokenDataReducer from \"./tokenData/tokenDataReducer\";\n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  nftData: nftDataReducer,\n  tokenData: tokenDataReducer,\n});\n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n\nexport default store;\n","// log\nimport store from \"../store\";\n\nconst fetchNftDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchNftDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchNftDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchNftData = (_owner) => {\n  return async (dispatch) => {\n    dispatch(fetchNftDataRequest());\n    try {\n      // let mintedWithBch = await store\n      //   .getState()\n      //   .blockchain.nftSmartContract.methods.mintedWithBch()\n      //   .call();\n      // let mintedWithNftc = await store\n      //   .getState()\n      //   .blockchain.nftSmartContract.methods.mintedWithNftc()\n      //   .call();\n      // let totalSupply = Number(mintedWithBch) + Number(mintedWithNftc);\n      \n      \n      let totalSupply =  await store\n        .getState()\n        .blockchain.nftSmartContract.methods.totalSupply()\n        .call();\n      let mintedWithBch = Number(totalSupply); \n      let mintedWithNftc = Number(totalSupply); \n\n\n      // let cost = await store\n      //   .getState()\n      //   .blockchain.nftSmartContract.methods.cost()\n      //   .call();\n\n      let nftsToClaim = await store\n      .getState()\n      .blockchain.nftSmartContract.methods.whitelist(_owner)\n      .call();\n\n\n      dispatch(\n        fetchNftDataSuccess({\n          mintedWithBch,\n          mintedWithNftc,\n          totalSupply,\n          nftsToClaim,\n          // cost,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchNftDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","// log\nimport store from \"../store\";\n\nconst fetchTokenDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchTokenDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchTokenDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchTokenData = (_owner, _spender) => {\n  return async (dispatch) => {\n    dispatch(fetchTokenDataRequest());\n    try {\n      console.log(_owner, _spender);\n      let tokensApproved = await store\n        .getState()\n        .blockchain.tokenSmartContract.methods.allowance(_owner, _spender)\n        .call();\n      // let bchBalance = await store.getState().blockchain.web3.eth.getBalance(accounts[0]);\n      let tokenBalance = await store\n        .getState()\n        .blockchain.tokenSmartContract.methods.balanceOf(_owner)\n        .call();\n      let mintedWithBch = await store\n        .getState()\n        .blockchain.nftSmartContract.methods.mintedWithBch()\n        .call();\n      let mintedWithNftc = await store\n        .getState()\n        .blockchain.nftSmartContract.methods.mintedWithNftc()\n        .call();\n      let totalSupply = Number(mintedWithBch) + Number(mintedWithNftc);\n\n\n      dispatch(\n        fetchTokenDataSuccess({\n          tokensApproved,\n          // bchBalance,\n          tokenBalance,\n          mintedWithBch,\n          mintedWithNftc,\n          totalSupply,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchTokenDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\n// log\nimport { fetchNftData } from \"../nftData/nftDataActions\";\nimport { fetchTokenData } from \"../tokenData/tokenDataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n\n    const nftAbiResponse = await fetch(\"/config/nft_abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const nftAbi = await nftAbiResponse.json();\n\n    const tokenAbiResponse = await fetch(\"/config/token_abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const tokenAbi = await tokenAbiResponse.json();\n\n\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const CONFIG = await configResponse.json();\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\",\n        });\n        if (networkId == CONFIG.NETWORK.ID) {\n          const nftSmartContractObj = new Web3EthContract(\n            nftAbi,\n            CONFIG.NFT_CONTRACT_ADDRESS\n          );\n          const tokenSmartContractObj = new Web3EthContract(\n            tokenAbi,\n            CONFIG.TOKEN_CONTRACT_ADDRESS\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              nftSmartContract: nftSmartContractObj,\n              tokenSmartContract: tokenSmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0], \"0xb72df4BD9951dDD59bbE2C5FC4d43d17d5B429df\"));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME} and then reload this website.`));\n          \n          try {\n            await window.ethereum.request({\n              method: 'wallet_switchEthereumChain',\n              params: [{ chainId: web3.utils.toHex(CONFIG.NETWORK.ID) }]\n            });\n          } catch (err) {\n            // This error code indicates that the chain has not been added to MetaMask\n            if (err.code === 4902) {\n              dispatch(connectFailed(`Add ${CONFIG.NETWORK.NAME} to Metamask and then reload this website.`));\n              await window.ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [\n                  {\n                    chainName: CONFIG.NETWORK.NAME,\n                    chainId: web3.utils.toHex(CONFIG.NETWORK.ID),\n                    nativeCurrency: { name: CONFIG.NETWORK.SYMBOL, decimals: 18, symbol: CONFIG.NETWORK.SYMBOL },\n                    rpcUrls: [CONFIG.NETWORK.RPC] \n                  }\n                ]\n              });\n            }\n          }\n\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong!\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Please install Metamask first from metamask.io\"));\n    }\n  };\n};\n\nexport const updateAccount = (account, nftCa) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchNftData(account));\n    dispatch(fetchTokenData(account, nftCa));\n  };\n};\n","import styled from \"styled-components\";\n\n// Used for wrapping a page component\nexport const Screen = styled.div`\n  background-color: var(--site-bg);\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\n  background-size: cover;\n  background-position: center;\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n`;\n\n// Used for providing space between components\nexport const SpacerXSmall = styled.div`\n  height: 8px;\n  width: 8px;\n`;\n\n// Used for providing space between components\nexport const SpacerSmall = styled.div`\n  height: 16px;\n  width: 16px;\n`;\n\n// Used for providing space between components\nexport const SpacerMedium = styled.div`\n  height: 24px;\n  width: 24px;\n`;\n\n// Used for providing space between components\nexport const SpacerLarge = styled.div`\n  height: 32px;\n  width: 32px;\n`;\n\n// Used for providing a wrapper around a component\nexport const Container = styled.div`\n  display: flex;\n  flex: ${({ flex }) => (flex ? flex : 0)};\n  flex-direction: ${({ fd }) => (fd ? fd : \"column\")};\n  justify-content: ${({ jc }) => (jc ? jc : \"flex-start\")};\n  align-items: ${({ ai }) => (ai ? ai : \"flex-start\")};\n  background-color: ${({ test }) => (test ? \"pink\" : \"none\")};\n  width: 100%;\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\n  background-size: cover;\n  background-position: center;\n`;\n\nexport const TextTitle = styled.p`\n  color: var(--normal-text);\n  font-size: 22px;\n  font-weight: 500;\n  line-height: 1.6;\n`;\n\nexport const TextSubTitle = styled.p`\n  color: var(--normal-text);\n  font-size: 18px;\n  line-height: 1.6;\n`;\n\nexport const TextDescription = styled.p`\n  color: var(--normal-text);\n  font-size: 16px;\n  line-height: 1.6;\n`;\n\nexport const StyledClickable = styled.div`\n  :active {\n    opacity: 0.6;\n  }\n`;\n","// npx browserslist@latest --update-db\n\n\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchNftData } from \"./redux/nftData/nftDataActions\";\nimport * as s from \"./styles/globalStyles\";\nimport styled from \"styled-components\";\nimport Countdown from 'react-countdown';\nimport { BrowserView, MobileView, isBrowser, isMobile } from 'react-device-detect';\n\n\nconst truncate = (input, len) => {\n  if (input !== \"\" && input !== null) {\n    return input.length > len ? `${input.substring(0, len)}...` : input;\n  }\n}\n\nconst Completionist = () => \"\";\n\nexport const StyledButton = styled.button`\n  padding: 10px;\n  border-radius: 50px;\n  border: none;\n  background-color: var(--buttons);\n  padding: 10px;\n  font-weight: bold;\n  color: var(--button-text);\n  width: 100px;\n  cursor: pointer;\n  box-shadow: 0px 6px 0px -2px var(--button-shadow);\n  -webkit-box-shadow: 0px 6px 0px -2px var(--button-shadow);\n  -moz-box-shadow: 0px 6px 0px -2px var(--button-shadow);\n  :active {\n    box-shadow: none;\n    -webkit-box-shadow: none;\n    -moz-box-shadow: none;\n  }\n`;\n\nexport const StyledRoundButton = styled.button`\n  padding: 10px;\n  border-radius: 100%;\n  border: none;\n  background-color: var(--buttons);\n  padding: 10px;\n  font-weight: bold;\n  font-size: 15px;\n  color: var(--button-text);\n  width: 40px;\n  height: 40px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0px 4px 0px -2px var(--button-shadow);\n  -webkit-box-shadow: 0px 4px 0px -2px var(--button-shadow);\n  -moz-box-shadow: 0px 4px 0px -2px var(--button-shadow);\n  :active {\n    box-shadow: none;\n    -webkit-box-shadow: none;\n    -moz-box-shadow: none;\n  }\n`;\n\nexport const ResponsiveWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: stretched;\n  align-items: stretched;\n  width: 100%;\n  @media (min-width: 767px) {\n    flex-direction: row;\n  }\n`;\n\nexport const StyledLogo = styled.img`\n  width: 200px;\n  @media (min-width: 767px) {\n    width: 300px;\n  }\n  transition: width 0.5s;\n  transition: height 0.5s;\n  margin-top: 1em;\n`;\n\nexport const StyledImg = styled.img`\n  // box-shadow: 0px 4px 0px -2px rgba(250, 50, 250, 0.3);\n  border: none;\n  background-color: var(--box-bg);\n  border-radius: 100%;\n  width: 200px;\n  @media (min-width: 900px) {\n    width: 250px;\n  }\n  @media (min-width: 1000px) {\n    width: 300px;\n  }\n  transition: width 0.5s;\n`;\n\nexport const StyledLink = styled.a`\n  color: var(--highlighted-text);\n  text-decoration: none;\n`;\n\n\nfunction App() {\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const nftData = useSelector((state) => state.nftData);\n  const [newToSmartBch, setNewToSmartBch] = useState(false);\n  const [claimingNft, setClaimingNft] = useState(false);\n  const [mintFeedback, setMintFeedback] = useState(`Please select how many NFTs you want to mint in one transcation.`);\n  const [mintAmount, setMintAmount] = useState(1);\n  const [CONFIG, SET_CONFIG] = useState({\n    NFT_CONTRACT_ADDRESS: \"\",\n    TOKEN_CONTRACT_ADDRESS: \"\",\n    NFT_SCAN_LINK: \"\",\n    TOKEN_SCAN_LINK: \"\",\n    NETWORK: {\n      NAME: \"\",\n      SYMBOL: \"\",\n      ID: 0,\n    },\n    NFT_NAME: \"\",\n    SYMBOL: \"\",\n    MAX_SUPPLY_BCH: 1,\n    MAX_SUPPLY_NFTC: 1,\n    MAX_SUPPLY: 1,\n    MAX_MINT_PER_TX: 1,\n    WEI_COST_BCH: 0,\n    DISPLAY_COST_BCH: 0,\n    WEI_COST_NFTC: 0,\n    DISPLAY_COST_NFTC: 0,\n    GAS_LIMIT: 0,\n    MARKETPLACE: \"\",\n    MARKETPLACE_LINK: \"\",\n    SHOW_BACKGROUND: false,\n    LAUNCH_DATE: \"\",\n    END_DATE: \"\",\n  });\n\n\n  const claimNFTsWithBCH = async () => {\n    if (blockchain.account !== \"\" && blockchain.nftSmartContract !== null) {\n      await dispatch(fetchNftData(blockchain.account));\n      let nftsLeft = CONFIG.MAX_SUPPLY_BCH - Number(nftData.mintedWithBch);\n      if (mintAmount > nftsLeft) {\n        setMintFeedback(`Not possible! There are only ${nftsLeft} ${CONFIG.NFT_NAME} NFTs available for minting with BCH!`);\n        return false;\n      }\n\n      console.log(nftData.nftsToClaim + \" NFTs can be claimed\");\n      console.log(blockchain.account);\n      if (mintAmount > nftData.nftsToClaim) {\n        setMintFeedback(`Not possible! Your wallet ` + blockchain.account + ` has ${nftData.nftsToClaim} ${CONFIG.NFT_NAME} NFTs left to claim for free!`);\n        return false;\n      }\n\n    } else {\n      setMintFeedback(`No connection to ${CONFIG.NETWORK} possible. Please reload the website.`);\n      return false;\n    }\n\n    let costBch = CONFIG.WEI_COST_BCH;\n\n    let gasLimit = CONFIG.GAS_LIMIT;\n    let totalCostBchWei = String(BigInt(costBch * mintAmount));\n    let totalGasLimit = String(BigInt(Math.min(10000000, gasLimit + (gasLimit - 25000) * (mintAmount - 1))));\n    console.log(\"CostBch: \", totalCostBchWei);\n\n    console.log(\"Gas limit: \", totalGasLimit);\n\n    let bchBalance = await blockchain.web3.eth.getBalance(blockchain.account);\n    console.log(bchBalance);\n\n    if (bchBalance < Number(totalCostBchWei) + Number(totalGasLimit)) {\n      setMintFeedback(`You have ${Math.round(bchBalance / 10 ** 14) / 10 ** 4} BCH in your wallet. You can mint up to ${Math.round(bchBalance / Number(costBch) - 0.5)} NFTs with that.`);\n      return false;\n    }\n\n    setMintFeedback(`Minting your ${CONFIG.NFT_NAME} NFTs. Please wait!`);\n    setClaimingNft(true);\n    blockchain.nftSmartContract.methods\n      .mint(mintAmount)\n      .send({\n        gasLimit: String(totalGasLimit),\n        to: CONFIG.NFT_CONTRACT_ADDRESS,\n        from: blockchain.account,\n        value: totalCostBchWei,\n      })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setMintFeedback(\"An error occured.\\nPlease try again later.\");\n        setClaimingNft(false);\n      })\n      .then((receipt) => {\n        console.log(receipt);\n        setMintFeedback(\n          `Congratulations! You successfully minted some ${CONFIG.NFT_NAME} NFTs! Visit ${CONFIG.MARKETPLACE} to take a look at your NFTs.`\n        );\n        setClaimingNft(false);\n        dispatch(fetchNftData(blockchain.account));\n      });\n  };\n\n  const decrementMintAmount = () => {\n    let newMintAmount = mintAmount - 1;\n    if (newMintAmount < 1) {\n      newMintAmount = 1;\n    }\n    setMintAmount(newMintAmount);\n  };\n\n  const incrementMintAmount = () => {\n    let newMintAmount = mintAmount + 1;\n    if (newMintAmount > CONFIG.MAX_MINT_PER_TX) {\n      newMintAmount = CONFIG.MAX_MINT_PER_TX;\n    }\n    setMintAmount(newMintAmount);\n  };\n\n  const setMintAmountInput = (e) => {\n    let newMintAmount = parseInt(e.target.value);\n    if (newMintAmount > CONFIG.MAX_MINT_PER_TX) {\n      newMintAmount = CONFIG.MAX_MINT_PER_TX;\n    }\n    else if (newMintAmount < 1) {\n      newMintAmount = 1;\n    }\n    setMintAmount(newMintAmount);\n  };\n\n  // const getNftData = () => {\n  //   if (blockchain.account !== \"\" && blockchain.nftSmartContract !== null) {\n  //     dispatch(fetchNftData(blockchain.account));\n  //   }\n  // };\n\n  const getNftAndTokenData = () => {\n    if (blockchain.account !== \"\" && blockchain.nftSmartContract !== null) {\n      dispatch(fetchNftData(blockchain.account)); // only NFTs\n      // dispatch(fetchTokenData(blockchain.account, CONFIG.NFT_CONTRACT_ADDRESS)); // NFTs and NFTC\n    }\n  };\n\n  const getConfig = async () => {\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const config = await configResponse.json();\n    SET_CONFIG(config);\n  };\n\n  useEffect(() => {\n    getConfig();\n  }, []);\n\n  useEffect(() => {\n    getNftAndTokenData();\n  }, [blockchain.account]);\n\n  return (\n    <s.Screen>\n      <s.Container\n        flex={1}\n        ai={\"center\"}\n        style={{ padding: 24, backgroundColor: \"var(--site-bg)\" }}\n        image={CONFIG.SHOW_BACKGROUND ? (isMobile ? \"/config/images/bgMobile.jpg\" : \"/config/images/bg.jpg\") : null}\n      >\n        {/* <StyledLogo alt={\"logo\"} src={\"/config/images/logo.jpg\"} /> */}\n        <ResponsiveWrapper flex={1} style={{ padding: 24 }} test>\n          {/* <s.Container flex={1} jc={\"center\"} ai={\"center\"}>\n            <StyledImg alt={\"preview\"} src={\"/config/images/preview.gif\"} />\n          </s.Container>\n          <s.SpacerLarge /> */}\n          <s.Container\n            flex={2}\n            jc={\"center\"}\n            ai={\"center\"}\n            style={{\n              backgroundColor: \"var(--box-bg)\",\n              padding: 24,\n              borderRadius: 24,\n              border: \"none\",\n              // boxShadow: \"0px 4px 0px -2px rgba(250,50,250,0.3)\",\n            }}\n          >\n            <s.TextDescription\n              style={{\n                textAlign: \"center\",\n                color: \"var(--normal-text)\",\n                paddingBottom: \"1em\",\n                maxWidth: \"450px\",\n              }}\n            ><img\n                style={{\n                  marginTop: \"1em\",\n                  maxWidth: \"100%\",\n                }}\n                src=\"/config/images/logo.png\"\n                alt=\"Kensho\" />\n\n              <p\n                style={{\n                  marginTop: \"1em\",\n                }}\n              >The Kensho Exclusive Series is the latest high-quality NFT collection created by the NFT Club. This series is a thank you to our greatest supporters and therefore, you can only mint these NFTs if you minted at least 50 Kensho NFTs before.\n\n                After minting your exclusive Kenshos, you can stake them at <StyledLink target={\"_blank\"} href=\"https://app.nftclub.cash\">app.nftclub.cash</StyledLink> to generate passive income of NFTC tokens.\n              </p>\n              <p\n                style={{\n                  marginTop: \"1em\",\n                }}\n              >\n                <s.SpacerLarge />\n\n                <StyledImg alt={\"preview\"} src={\"/config/images/preview.gif\"} />\n              </p>\n            </s.TextDescription>\n            {new Date() < new Date(CONFIG.LAUNCH_DATE) ? (\n              <s.TextTitle\n                style={{\n                  textAlign: \"center\",\n                  fontSize: 24,\n                  color: \"var(--normal-text)\",\n                }}\n              >\n                Stay tuned! The {CONFIG.NFT_NAME} NFT collection is launching soon — only on SmartBCH!\n              </s.TextTitle>\n            ) : null}\n\n            <s.SpacerSmall />\n            <s.TextDescription\n              style={{\n                textAlign: \"center\",\n                fontFamily: \"Liberation Mono\",\n                color: \"var(--normal-text)\",\n              }}\n            >\n            </s.TextDescription>\n            <s.SpacerSmall />\n\n\n            {Number(nftData.totalSupply) >= CONFIG.MAX_SUPPLY ? (\n              <>\n                <s.TextTitle\n                  style={{ textAlign: \"center\", color: \"var(--big-text)\" }}\n                >\n                  All NFTs have been minted!\n                </s.TextTitle>\n                <s.TextDescription\n                  style={{ textAlign: \"center\", color: \"var(--big-text)\" }}\n                >\n                  You can still find {CONFIG.NFT_NAME} on\n                </s.TextDescription>\n                <s.SpacerSmall />\n                <StyledLink target={\"_blank\"} href={CONFIG.MARKETPLACE_LINK}>\n                  <img style={{\n                    width: \"192px\",\n                  }} src=\"/oasis_logo.svg\" alt=\"Oasis\" />\n                </StyledLink>\n              </>\n            ) : (\n              <>\n                <s.SpacerSmall />\n                <s.TextTitle\n                  style={{ textAlign: \"center\", color: \"var(--highlighted-text)\" }}\n                >\n                  For every 50 Kensho NFTs which you minted during the main mint, you can mint 240 {CONFIG.SYMBOL} for free!\n                </s.TextTitle>\n                <s.SpacerMedium />\n                {CONFIG.TOKEN_CONTRACT_ADDRESS !== CONFIG.NFT_CONTRACT_ADDRESS ? (\n                  <>\n                    <StyledLink target={\"_blank\"} href={CONFIG.NFT_SCAN_LINK}>\n                      {CONFIG.NFT_NAME} CA: {truncate(CONFIG.NFT_CONTRACT_ADDRESS, 15)}\n                    </StyledLink>\n                    {blockchain.account !== \"\" && blockchain.account !== null ? (\n                      <>\n                        <s.SpacerXSmall />\n                        <StyledLink target={\"_blank\"} href={CONFIG.TOKEN_SCAN_LINK}>\n                          Connected wallet: {truncate(blockchain.account, 15)}\n                        </StyledLink>\n                      </>\n                    ) : null}\n                    <s.SpacerLarge />\n                  </>\n                ) : null}\n\n\n                {blockchain.account === \"\" ||\n                  blockchain.nftSmartContract === null ? (\n                  <>\n                    <s.Container ai={\"center\"} jc={\"center\"}>\n                      <s.TextDescription\n                        style={{\n                          textAlign: \"center\",\n                          color: \"var(--normal-text)\",\n                        }}\n                      >\n                        Please connect MetaMask to the {CONFIG.NETWORK.NAME} network and then connect to this website.\n                      </s.TextDescription>\n                      <s.SpacerSmall />\n                      <s.TextDescription\n                        style={{\n                          textAlign: \"center\",\n                          color: \"var(--normal-text)\",\n                        }}\n                      >\n                        If you are on a computer, please unlock your MetaMask browser extension first and then refresh this page before clicking the CONNECT button.\n                      </s.TextDescription>\n                      <s.SpacerSmall />\n                      <s.TextDescription\n                        style={{\n                          textAlign: \"center\",\n                          color: \"var(--normal-text)\",\n                        }}\n                      >\n                        You can mint up to {CONFIG.MAX_MINT_PER_TX} NFTs per transaction. The NFTs are minted in a non-sequential, randomised order.\n                      </s.TextDescription>\n\n                      <s.SpacerLarge />\n                      <s.SpacerSmall />\n                      <StyledButton\n                        onClick={(e) => {\n                          e.preventDefault();\n                          dispatch(connect());\n                          getNftAndTokenData();\n                        }}\n                      >\n                        CONNECT\n                      </StyledButton>\n                      {blockchain.errorMsg !== \"\" ? (\n                        <>\n                          <s.SpacerSmall />\n                          <s.TextDescription\n                            style={{\n                              textAlign: \"center\",\n                              color: \"var(--big-text)\",\n                            }}\n                          >\n                            {blockchain.errorMsg}\n                          </s.TextDescription>\n                        </>\n                      ) : null}\n                    </s.Container>\n\n                    {newToSmartBch === true ? (\n                      <>\n                        <s.SpacerMedium />\n                        <s.TextDescription\n                          style={{\n                            textAlign: \"center\",\n                            color: \"var(--normal-text)\",\n                          }}\n                        >\n                          Here are some helpful links to get you started:\n                        </s.TextDescription>\n                        <s.SpacerXSmall />\n                        <StyledLink target={\"_blank\"} href=\"https://helpme.cash\">\n                          helpme.cash -- a collection of helpful links to get you started.\n                        </StyledLink>\n                        <s.SpacerXSmall />\n                        <StyledLink target={\"_blank\"} href=\"https://app.mistswap.fi/bridge\">\n                          MistSwap Bridge -- bridge many cryptos to SmartBch.\n                        </StyledLink>\n                        <s.SpacerXSmall />\n                        <s.TextDescription\n                          style={{\n                            textAlign: \"center\",\n                            color: \"var(--normal-text)\",\n                          }}\n                        >\n                          Click CONNECT to automatically add SmartBch to MetaMask.\n                        </s.TextDescription>\n                      </>\n                    ) : (\n                      <>\n                        <s.SpacerSmall />\n                        <StyledButton\n                          onClick={(e) => {\n                            e.preventDefault();\n                            setNewToSmartBch(true);\n                          }}\n                        >\n                          New to SmartBch?\n                        </StyledButton>\n                      </>\n                    )}\n                  </>\n                ) : (\n                  <>\n                    {new Date() > new Date(CONFIG.LAUNCH_DATE) &&\n                      blockchain.account !== \"\" &&\n                      blockchain.tokenSmartContract !== null ? (\n                      <>\n                        <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\n                          <s.TextTitle\n                            style={{\n                              textAlign: \"center\",\n                              fontSize: 28,\n                              fontWeight: \"bold\",\n                              fontFamily: \"Liberation Mono\",\n                              color: \"var(--highlighted-text)\",\n                            }}\n                          >\n                            {nftData.totalSupply} / {CONFIG.MAX_SUPPLY_BCH} minted for free\n                          </s.TextTitle>\n                        </s.Container>\n                        <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\n                          <s.TextTitle\n                            style={{\n                              textAlign: \"center\",\n                              fontSize: 28,\n                              fontWeight: \"bold\",\n                              fontFamily: \"Liberation Mono\",\n                              color: \"var(--highlighted-text)\",\n                            }}\n                          >\n                            You can mint {nftData.nftsToClaim} NFTs for free\n                          </s.TextTitle>\n                        </s.Container>\n\n                        <s.SpacerLarge />\n\n                        <s.TextDescription\n                          style={{\n                            textAlign: \"center\",\n                            color: \"var(--big-text)\",\n                          }}\n                        >\n                          {mintFeedback}\n                        </s.TextDescription>\n                        <s.SpacerXSmall />\n\n                        <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\n                          <StyledRoundButton\n                            style={{ lineHeight: 0.4 }}\n                            disabled={claimingNft ? 1 : 0}\n                            onClick={(e) => {\n                              e.preventDefault();\n                              decrementMintAmount();\n                            }}\n                          >\n                            -\n                          </StyledRoundButton>\n                          <s.SpacerMedium />\n                          <s.TextDescription\n                            style={{\n                              textAlign: \"center\",\n                              color: \"var(--highlighted-text)\",\n                            }}\n                          >\n                            <input type={\"number\"} style={{ width: \"50px\", padding: \"5px\" }} value={mintAmount} onChange={setMintAmountInput} />\n                          </s.TextDescription>\n                          <s.SpacerMedium />\n                          <StyledRoundButton\n                            disabled={claimingNft ? 1 : 0}\n                            onClick={(e) => {\n                              e.preventDefault();\n                              incrementMintAmount();\n                            }}\n                          >\n                            +\n                          </StyledRoundButton>\n                        </s.Container>\n                        <s.SpacerSmall />\n\n                      </>\n                    ) : null}\n                    {/* {new Date() > new Date(CONFIG.LAUNCH_DATE) ? ( */}\n                    {new Date() < new Date(CONFIG.END_DATE) ? (\n                      <>\n                        <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\n                          <StyledButton\n                            disabled={claimingNft ? 1 : 0}\n                            onClick={(e) => {\n                              e.preventDefault();\n                              claimNFTsWithBCH();\n                              getNftAndTokenData();\n                            }}\n                          >\n                            {claimingNft ? \"BUSY\" : \"MINT\"}\n                          </StyledButton>\n                        </s.Container>\n                        <s.SpacerLarge />\n                      </>\n                    ) : (\n                      <s.TextDescription\n                        style={{\n                          textAlign: \"center\",\n                          fontSize: 28,\n                          color: \"var(--big-text)\",\n                        }}\n                      >\n                        {/* The minting begins {new Date(CONFIG.LAUNCH_DATE).toUTCString()}. */}\n                        The minting ended {new Date(CONFIG.END_DATE).toUTCString()}.\n                      </s.TextDescription>\n                    )}\n                  </>\n                )}\n              </>\n            )}\n\n\n\n\n\n\n\n\n            {new Date() < new Date(CONFIG.END_DATE) ? (\n              <>\n              <s.SpacerLarge />\n            <s.TextDescription\n                      style={{\n                        textAlign: \"center\",\n                        fontSize: 28,\n                        color: \"var(--big-text)\",\n                      }}\n                    >\n                      Minting is possible until {new Date(CONFIG.END_DATE).toUTCString()}.\n                    </s.TextDescription>\n                    </>\n                    ) : (\n                      null\n                    )}\n            <div className=\"countdown\" style={{\n              textAlign: \"center\",\n              fontSize: 48,\n              fontWeight: \"bold\",\n              fontFamily: \"Liberation Mono\",\n              color: \"var(--big-text)\",\n            }}>\n              <Countdown\n                date={new Date(CONFIG.END_DATE)}\n              >\n                <Completionist />\n              </Countdown>\n\n              {/* <Countdown\n                date={new Date(CONFIG.LAUNCH_DATE)}\n              >\n                <Completionist />\n              </Countdown> */}\n\n            </div>\n            <s.Container jc={\"center\"} ai={\"center\"} style={{ width: \"90%\" }}>\n              <s.SpacerMedium />\n              <s.TextDescription\n                style={{\n                  textAlign: \"center\",\n                  color: \"var(--muted-text)\",\n                }}\n              >\n                The gas limit is set to {CONFIG.GAS_LIMIT} to ensure a successful mint.\n              </s.TextDescription>\n              <s.TextDescription\n                style={{\n                  textAlign: \"center\",\n                  color: \"var(--muted-text)\",\n                }}\n              >\n                Unused gas is automatically returned to your wallet.\n              </s.TextDescription>\n              <s.TextDescription\n                style={{\n                  textAlign: \"center\",\n                  color: \"var(--muted-text)\",\n                }}\n              >\n                If you lower the gas limit, you risk failed transactions.\n              </s.TextDescription>\n              <s.SpacerSmall />\n              <s.TextDescription\n                style={{\n                  textAlign: \"center\",\n                  fontSize: 20,\n                  color: \"var(--highlighted-text)\",\n                }}\n              >\n                Please note: Once you make the purchase, you cannot undo this action.\n              </s.TextDescription>\n              <s.SpacerLarge />\n              <s.Container flex={1} jc={\"center\"} ai={\"center\"}>\n                <StyledImg alt={\"preview\"} src={\"/config/images/preview.gif\"} />\n              </s.Container>\n            </s.Container>\n            <s.SpacerLarge />\n            <s.Container\n              jc={\"center\"}\n              ai={\"center\"}\n              style={{\n                margin: \"0\",\n                padding: \"0\",\n                color: \"#efefef\",\n              }}\n            >\n              {/* <a href=\"https://github.com/zquestz/reapers.cash\" target=\"_blank\"><img src=\"/github-alt-brands.svg\" /></a> */}\n              <div className=\"social\">\n                <a href=\"https://t.me/NFTClubOfficial\" target=\"_blank\"><img src=\"/telegram-plane-brands.svg\" /></a>\n                <a href=\"https://twitter.com/PixelGuyClub1\" target=\"_blank\"><img src=\"/twitter-brands.svg\" /></a>\n                <a href=\"https://www.instagram.com/nft_club_official/\" target=\"_blank\"><img src=\"/instagram-brands.svg\" /></a>\n                <a href=\"https://app.nftclub.cash\" target=\"_blank\"><img src=\"/bch.svg\" /></a>\n              </div>\n            </s.Container>\n          </s.Container>\n          {/* <s.SpacerLarge />\n          <s.Container flex={1} jc={\"center\"} ai={\"center\"}>\n            <StyledImg\n              alt={\"preview\"}\n              src={\"/config/images/preview.gif\"}\n            />\n          </s.Container> */}\n        </ResponsiveWrapper>\n\n      </s.Container >\n\n    </s.Screen >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./styles/reset.css\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}