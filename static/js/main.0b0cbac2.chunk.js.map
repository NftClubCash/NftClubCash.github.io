{"version":3,"sources":["redux/blockchain/blockchainReducer.js","redux/nftData/nftDataReducer.js","redux/tokenData/tokenDataReducer.js","redux/store.js","redux/nftData/nftDataActions.js","redux/tokenData/tokenDataActions.js","redux/blockchain/blockchainActions.js","styles/globalStyles.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","loading","account","nftSmartContract","tokenSmartContract","web3","errorMsg","blockchainReducer","state","action","type","payload","mintedWithNftc","mintedWithBch","totalSupply","cost","error","nftDataReducer","tokensApproved","tokenBalance","tokenDataReducer","rootReducer","combineReducers","blockchain","nftData","tokenData","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchNftDataFailed","fetchNftData","dispatch","a","getState","methods","call","console","log","fetchTokenDataFailed","fetchTokenData","_owner","_spender","allowance","balanceOf","connectFailed","updateAccount","nftCa","Screen","styled","div","image","SpacerSmall","SpacerMedium","SpacerLarge","Container","flex","fd","jc","ai","test","TextTitle","p","TextDescription","Completionist","StyledButton","button","StyledRoundButton","ResponsiveWrapper","StyledImg","img","StyledLink","App","input","len","useDispatch","useSelector","useState","claimingNft","setClaimingNft","approvingToken","setApprovingToken","approvedToken","setApprovedToken","feedback","setFeedback","mintAmount","setMintAmount","NFT_CONTRACT_ADDRESS","TOKEN_CONTRACT_ADDRESS","SCAN_LINK","NETWORK","NAME","SYMBOL","ID","NFT_NAME","MAX_SUPPLY_BCH","MAX_SUPPLY_NFTC","MAX_MINT_PER_TX","WEI_COST_BCH","DISPLAY_COST_BCH","WEI_COST_NFTC","DISPLAY_COST_NFTC","GAS_LIMIT","MARKETPLACE","MARKETPLACE_LINK","SHOW_BACKGROUND","LAUNCH_DATE","END_DATE","CONFIG","SET_CONFIG","claimNFTsWithNFTC","costNftc","totalCostNftcWei","String","BigInt","gasLimit","totalGasLimit","mintWithNftc","send","to","from","value","once","err","then","receipt","getNftAndTokenData","getConfig","fetch","headers","Accept","configResponse","json","config","useEffect","style","padding","backgroundColor","isMobile","borderRadius","border","textAlign","color","paddingBottom","maxWidth","marginTop","src","alt","target","href","Date","fontSize","fontWeight","fontFamily","length","substring","Number","MAX_SUPPLY","width","onClick","e","preventDefault","nftAbiResponse","nftAbi","tokenAbiResponse","tokenAbi","window","ethereum","isMetaMask","Web3EthContract","setProvider","Web3","request","method","accounts","nftSmartContractObj","tokenSmartContractObj","on","location","reload","lineHeight","disabled","newMintAmount","decrementMintAmount","onChange","parseInt","incrementMintAmount","costBch","totalCostBchWei","mint","claimNFTsWithBCH","Math","floor","approve","approveNftc","toUTCString","className","date","margin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b0cbac2.chunk.js","sourcesContent":["const initialState = {\n  loading: false,\n  account: null,\n  nftSmartContract: null,\n  tokenSmartContract: null,\n  web3: null,\n  errorMsg: \"\",\n};\n\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECTION_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CONNECTION_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        nftSmartContract: action.payload.nftSmartContract,\n        tokenSmartContract: action.payload.tokenSmartContract,\n        web3: action.payload.web3,\n      };\n    case \"CONNECTION_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        errorMsg: action.payload,\n      };\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;\n","const initialState = {\n  loading: false,\n  mintedWithNftc: 0,\n  mintedWithBch: 0,\n  totalSupply: 0,\n  cost: 0,\n  error: false,\n  errorMsg: \"\",\n};\n\nconst nftDataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        mintedWithNftc: action.payload.mintedWithNftc,\n        mintedWithBch: action.payload.mintedWithBch,\n        totalSupply: action.payload.totalSupply,\n        // cost: action.payload.cost,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default nftDataReducer;\n","const initialState = {\n  loading: false,\n  tokensApproved: 0,\n  tokenBalance: 0,\n  mintedWithNftc: 0,\n  mintedWithBch: 0,\n  totalSupply: 0,\n  error: false,\n  errorMsg: \"\",\n};\n\nconst tokenDataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        tokensApproved: action.payload.tokensApproved,\n        tokenBalance: action.payload.tokenBalance,\n        mintedWithNftc: action.payload.mintedWithNftc,\n        mintedWithBch: action.payload.mintedWithBch,\n        totalSupply: action.payload.totalSupply,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default tokenDataReducer;\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport nftDataReducer from \"./nftData/nftDataReducer\";\nimport tokenDataReducer from \"./tokenData/tokenDataReducer\";\n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  nftData: nftDataReducer,\n  tokenData: tokenDataReducer,\n});\n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n\nexport default store;\n","// log\nimport store from \"../store\";\n\nconst fetchNftDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchNftDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchNftDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchNftData = () => {\n  return async (dispatch) => {\n    dispatch(fetchNftDataRequest());\n    try {\n      let mintedWithBch = await store\n        .getState()\n        .blockchain.nftSmartContract.methods.mintedWithBch()\n        .call();\n      let mintedWithNftc = await store\n        .getState()\n        .blockchain.nftSmartContract.methods.mintedWithNftc()\n        .call();\n      let totalSupply = mintedWithBch + mintedWithNftc;\n      // let cost = await store\n      //   .getState()\n      //   .blockchain.nftSmartContract.methods.cost()\n      //   .call();\n\n      dispatch(\n        fetchNftDataSuccess({\n          mintedWithBch,\n          mintedWithNftc,\n          totalSupply,\n          // cost,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchNftDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","// log\nimport store from \"../store\";\n\nconst fetchTokenDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchTokenDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchTokenDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchTokenData = (_owner, _spender) => {\n  return async (dispatch) => {\n    dispatch(fetchTokenDataRequest());\n    try {\n      console.log(_owner, _spender);\n      let tokensApproved = await store\n        .getState()\n        .blockchain.tokenSmartContract.methods.allowance(_owner, _spender)\n        .call();\n      let tokenBalance = await store\n        .getState()\n        .blockchain.tokenSmartContract.methods.balanceOf(_owner)\n        .call();\n      let mintedWithBch = await store\n        .getState()\n        .blockchain.nftSmartContract.methods.mintedWithBch()\n        .call();\n      let mintedWithNftc = await store\n        .getState()\n        .blockchain.nftSmartContract.methods.mintedWithNftc()\n        .call();\n      let totalSupply = mintedWithBch + mintedWithNftc;\n\n\n      dispatch(\n        fetchTokenDataSuccess({\n          tokensApproved,\n          tokenBalance,\n          mintedWithBch,\n          mintedWithNftc,\n          totalSupply,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchTokenDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\n// log\nimport { fetchNftData } from \"../nftData/nftDataActions\";\nimport { fetchTokenData } from \"../tokenData/tokenDataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    \n    const nftAbiResponse = await fetch(\"/config/nft_abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const nftAbi = await nftAbiResponse.json();\n\n    const tokenAbiResponse = await fetch(\"/config/token_abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const tokenAbi = await tokenAbiResponse.json();\n\n\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const CONFIG = await configResponse.json();\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\",\n        });\n        if (networkId == CONFIG.NETWORK.ID) {\n          const nftSmartContractObj = new Web3EthContract(\n            nftAbi,\n            CONFIG.NFT_CONTRACT_ADDRESS\n          );\n          const tokenSmartContractObj = new Web3EthContract(\n            tokenAbi,\n            CONFIG.TOKEN_CONTRACT_ADDRESS\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              nftSmartContract: nftSmartContractObj,\n              tokenSmartContract: tokenSmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0],\"0xb72df4BD9951dDD59bbE2C5FC4d43d17d5B429df\"));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME} and then reload this website.`));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong: \" + err));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account, nftCa) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchNftData(account));\n    dispatch(fetchTokenData(account, nftCa));\n  };\n};\n","import styled from \"styled-components\";\n\n// Used for wrapping a page component\nexport const Screen = styled.div`\n  background-color: var(--site-bg);\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\n  background-size: cover;\n  background-position: center;\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n`;\n\n// Used for providing space between components\nexport const SpacerXSmall = styled.div`\n  height: 8px;\n  width: 8px;\n`;\n\n// Used for providing space between components\nexport const SpacerSmall = styled.div`\n  height: 16px;\n  width: 16px;\n`;\n\n// Used for providing space between components\nexport const SpacerMedium = styled.div`\n  height: 24px;\n  width: 24px;\n`;\n\n// Used for providing space between components\nexport const SpacerLarge = styled.div`\n  height: 32px;\n  width: 32px;\n`;\n\n// Used for providing a wrapper around a component\nexport const Container = styled.div`\n  display: flex;\n  flex: ${({ flex }) => (flex ? flex : 0)};\n  flex-direction: ${({ fd }) => (fd ? fd : \"column\")};\n  justify-content: ${({ jc }) => (jc ? jc : \"flex-start\")};\n  align-items: ${({ ai }) => (ai ? ai : \"flex-start\")};\n  background-color: ${({ test }) => (test ? \"pink\" : \"none\")};\n  width: 100%;\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\n  background-size: cover;\n  background-position: center;\n`;\n\nexport const TextTitle = styled.p`\n  color: var(--normal-text);\n  font-size: 22px;\n  font-weight: 500;\n  line-height: 1.6;\n`;\n\nexport const TextSubTitle = styled.p`\n  color: var(--normal-text);\n  font-size: 18px;\n  line-height: 1.6;\n`;\n\nexport const TextDescription = styled.p`\n  color: var(--normal-text);\n  font-size: 16px;\n  line-height: 1.6;\n`;\n\nexport const StyledClickable = styled.div`\n  :active {\n    opacity: 0.6;\n  }\n`;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchNftData } from \"./redux/nftData/nftDataActions\";\nimport { fetchTokenData } from \"./redux/tokenData/tokenDataActions\";\nimport * as s from \"./styles/globalStyles\";\nimport styled from \"styled-components\";\nimport Countdown from 'react-countdown';\nimport { BrowserView, MobileView, isBrowser, isMobile } from 'react-device-detect';\n\n\nconst truncate = (input, len) =>\n  input.length > len ? `${input.substring(0, len)}...` : input;\n\nconst Completionist = () => \"\";\n\nexport const StyledButton = styled.button`\n  padding: 10px;\n  border-radius: 50px;\n  border: none;\n  background-color: var(--buttons);\n  padding: 10px;\n  font-weight: bold;\n  color: var(--button-text);\n  width: 100px;\n  cursor: pointer;\n  box-shadow: 0px 6px 0px -2px var(--button-shadow);\n  -webkit-box-shadow: 0px 6px 0px -2px var(--button-shadow);\n  -moz-box-shadow: 0px 6px 0px -2px var(--button-shadow);\n  :active {\n    box-shadow: none;\n    -webkit-box-shadow: none;\n    -moz-box-shadow: none;\n  }\n`;\n\nexport const StyledRoundButton = styled.button`\n  padding: 10px;\n  border-radius: 100%;\n  border: none;\n  background-color: var(--buttons);\n  padding: 10px;\n  font-weight: bold;\n  font-size: 15px;\n  color: var(--button-text);\n  width: 40px;\n  height: 40px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0px 4px 0px -2px var(--button-shadow);\n  -webkit-box-shadow: 0px 4px 0px -2px var(--button-shadow);\n  -moz-box-shadow: 0px 4px 0px -2px var(--button-shadow);\n  :active {\n    box-shadow: none;\n    -webkit-box-shadow: none;\n    -moz-box-shadow: none;\n  }\n`;\n\nexport const ResponsiveWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: stretched;\n  align-items: stretched;\n  width: 100%;\n  @media (min-width: 767px) {\n    flex-direction: row;\n  }\n`;\n\nexport const StyledLogo = styled.img`\n  width: 200px;\n  @media (min-width: 767px) {\n    width: 300px;\n  }\n  transition: width 0.5s;\n  transition: height 0.5s;\n  margin-top: 1em;\n`;\n\nexport const StyledImg = styled.img`\n  // box-shadow: 0px 4px 0px -2px rgba(250, 50, 250, 0.3);\n  border: none;\n  background-color: var(--box-bg);\n  border-radius: 100%;\n  width: 200px;\n  @media (min-width: 900px) {\n    width: 250px;\n  }\n  @media (min-width: 1000px) {\n    width: 300px;\n  }\n  transition: width 0.5s;\n`;\n\nexport const StyledLink = styled.a`\n  color: var(--highlighted-text);\n  text-decoration: none;\n`;\n\n\nfunction App() {\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const nftData = useSelector((state) => state.nftData);\n  const tokenData = useSelector((state) => state.tokenData);\n  const [claimingNft, setClaimingNft] = useState(false);\n  const [approvingToken, setApprovingToken] = useState(false);\n  const [approvedToken, setApprovedToken] = useState(false);\n  const [feedback, setFeedback] = useState(`Please select how many NFTs you want to mint in one transcation.`);\n  const [mintAmount, setMintAmount] = useState(10);\n  const [CONFIG, SET_CONFIG] = useState({\n    NFT_CONTRACT_ADDRESS: \"\",\n    TOKEN_CONTRACT_ADDRESS: \"\",\n    SCAN_LINK: \"\",\n    NETWORK: {\n      NAME: \"\",\n      SYMBOL: \"\",\n      ID: 0,\n    },\n    NFT_NAME: \"\",\n    SYMBOL: \"\",\n    MAX_SUPPLY_BCH: 1,\n    MAX_SUPPLY_NFTC: 1,\n    MAX_MINT_PER_TX: 1,\n    WEI_COST_BCH: 0,\n    DISPLAY_COST_BCH: 0,\n    WEI_COST_NFTC: 0,\n    DISPLAY_COST_NFTC: 0,\n    GAS_LIMIT: 0,\n    MARKETPLACE: \"\",\n    MARKETPLACE_LINK: \"\",\n    SHOW_BACKGROUND: false,\n    LAUNCH_DATE: \"\",\n    END_DATE: \"\",\n  });\n\n\n  const claimNFTsWithBCH = () => {\n    let costBch = CONFIG.WEI_COST_BCH;\n\n    let gasLimit = CONFIG.GAS_LIMIT;\n    let totalCostBchWei = String(BigInt(costBch * mintAmount));\n    let totalGasLimit = String(BigInt(gasLimit * mintAmount));\n    console.log(\"CostBch: \", totalCostBchWei);\n\n    console.log(\"Gas limit: \", totalGasLimit);\n    setFeedback(`Minting your ${CONFIG.NFT_NAME} NFTs. Please wait!`);\n    setClaimingNft(true);\n    blockchain.nftSmartContract.methods\n      .mint(mintAmount)\n      .send({\n        gasLimit: String(totalGasLimit),\n        to: CONFIG.NFT_CONTRACT_ADDRESS,\n        from: blockchain.account,\n        value: totalCostBchWei,\n      })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setFeedback(\"An error occured. \" + err + \"\\nPlease try again later.\");\n        setClaimingNft(false);\n      })\n      .then((receipt) => {\n        console.log(receipt);\n        setFeedback(\n          `Congratulations! You successfully minted some ${CONFIG.NFT_NAME} NFTs! Visit ${CONFIG.MARKETPLACE} to take a look at your NFTs.`\n        );\n        setClaimingNft(false);\n        dispatch(fetchNftData(blockchain.account));\n      });\n  };\n\n\n  const approveNftc = () => {\n    let costNftc = CONFIG.WEI_COST_NFTC;\n    let totalCostNftcWei = String(BigInt(costNftc * mintAmount + 10 ** 18));\n\n    let totalGasLimit = String(70000);\n\n    setFeedback(`Approving NFTC...`);\n    setApprovingToken(true);\n\n    blockchain.tokenSmartContract.methods\n      .approve(CONFIG.NFT_CONTRACT_ADDRESS, totalCostNftcWei)\n      .send({\n        gasLimit: String(totalGasLimit),\n        to: CONFIG.TOKEN_CONTRACT_ADDRESS,\n        from: blockchain.account,\n        value: 0,\n      })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setFeedback(\"An error occured: \" + err + \"\\nPlease try again later.\");\n        setApprovingToken(false);\n      })\n      .then((receipt) => {\n        console.log(receipt);\n        setFeedback(\n          `NFTC approved. Now you can use it to mint your ${CONFIG.NFT_NAME} NFTs!`\n        );\n        setApprovingToken(false);\n        setApprovedToken(true);\n        dispatch(fetchTokenData(blockchain.account, CONFIG.NFT_CONTRACT_ADDRESS));\n      });\n  };\n\n  const claimNFTsWithNFTC = async () => {\n    let costNftc = CONFIG.WEI_COST_NFTC;\n    let totalCostNftcWei = String(BigInt(costNftc * mintAmount));\n    console.log(\"CostNftc: \", totalCostNftcWei);\n\n    if (blockchain.account !== \"\" && blockchain.nftSmartContract !== null) {\n      await dispatch(fetchTokenData(blockchain.account, CONFIG.NFT_CONTRACT_ADDRESS));\n      if (BigInt(tokenData.tokensApproved) < BigInt(totalCostNftcWei)) {\n        setFeedback(`Not enough NFTC approved for minting ` + mintAmount + ` ${CONFIG.NFT_NAME} NFTs!`);\n        setApprovedToken(false);\n        return false;\n      }\n      else if (BigInt(tokenData.tokenBalance) < BigInt(totalCostNftcWei)) {\n        setFeedback(`You don't own enough NFTC for minting ` + mintAmount + ` ${CONFIG.NFT_NAME} NFTs!`);\n        setApprovedToken(false);\n        return false;\n      }\n      else {\n        setApprovedToken(true);\n      }\n    }\n\n    let gasLimit = CONFIG.GAS_LIMIT;\n    let totalGasLimit = String(BigInt(gasLimit * mintAmount));\n\n    console.log(\"Gas limit: \", totalGasLimit);\n    setFeedback(`Minting your ${CONFIG.NFT_NAME} NFTs...`);\n    setClaimingNft(true);\n    blockchain.nftSmartContract.methods\n      .mintWithNftc(mintAmount)\n      .send({\n        gasLimit: String(totalGasLimit),\n        to: CONFIG.NFT_CONTRACT_ADDRESS,\n        from: blockchain.account,\n        value: 0,\n      })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setFeedback(\"An error occured: \" + err + \"\\nPlease try again later.\");\n        setClaimingNft(false);\n      })\n      .then((receipt) => {\n        console.log(receipt);\n        setFeedback(\n          `Congratulations! You successfully minted some ${CONFIG.NFT_NAME} NFTs! Visit ${CONFIG.MARKETPLACE} to take a look at your NFTs.`\n        );\n        setClaimingNft(false);\n        dispatch(fetchTokenData(blockchain.account, CONFIG.NFT_CONTRACT_ADDRESS));\n      });\n  };\n\n  const decrementMintAmount = () => {\n    let newMintAmount = mintAmount - 1;\n    if (newMintAmount < 1) {\n      newMintAmount = 1;\n    }\n    setMintAmount(newMintAmount);\n  };\n\n  const incrementMintAmount = () => {\n    let newMintAmount = mintAmount + 1;\n    if (newMintAmount > CONFIG.MAX_MINT_PER_TX) {\n      newMintAmount = CONFIG.MAX_MINT_PER_TX;\n    }\n    setMintAmount(newMintAmount);\n  };\n\n  const setMintAmountInput = (e) => {\n    let newMintAmount = parseInt(e.target.value);\n    if (newMintAmount > CONFIG.MAX_MINT_PER_TX) {\n      newMintAmount = CONFIG.MAX_MINT_PER_TX;\n    }\n    else if (newMintAmount < 1) {\n      newMintAmount = 1;\n    }\n    setMintAmount(newMintAmount);\n  };\n\n  const getNftData = () => {\n    if (blockchain.account !== \"\" && blockchain.nftSmartContract !== null) {\n      dispatch(fetchNftData(blockchain.account));\n    }\n  };\n\n  const getNftAndTokenData = () => {\n    if (blockchain.account !== \"\" && blockchain.nftSmartContract !== null) {\n      dispatch(fetchTokenData(blockchain.account, CONFIG.NFT_CONTRACT_ADDRESS));\n    }\n  };\n\n  const getConfig = async () => {\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const config = await configResponse.json();\n    SET_CONFIG(config);\n  };\n\n  useEffect(() => {\n    getConfig();\n  }, []);\n\n  useEffect(() => {\n    getNftAndTokenData();\n  }, [blockchain.account]);\n\n  return (\n    <s.Screen>\n      <s.Container\n        flex={1}\n        ai={\"center\"}\n        style={{ padding: 24, backgroundColor: \"var(--site-bg)\" }}\n        image={CONFIG.SHOW_BACKGROUND ? (isMobile ? \"/config/images/bgMobile.jpg\" : \"/config/images/bg.jpg\") : null}\n      >\n        {/* <StyledLogo alt={\"logo\"} src={\"/config/images/logo.jpg\"} /> */}\n        <ResponsiveWrapper flex={1} style={{ padding: 24 }} test>\n          {/* <s.Container flex={1} jc={\"center\"} ai={\"center\"}>\n            <StyledImg alt={\"preview\"} src={\"/config/images/preview.gif\"} />\n          </s.Container>\n          <s.SpacerLarge /> */}\n          <s.Container\n            flex={2}\n            jc={\"center\"}\n            ai={\"center\"}\n            style={{\n              backgroundColor: \"var(--box-bg)\",\n              padding: 24,\n              borderRadius: 24,\n              border: \"none\",\n              // boxShadow: \"0px 4px 0px -2px rgba(250,50,250,0.3)\",\n            }}\n          >\n            <s.TextDescription\n              style={{\n                textAlign: \"center\",\n                color: \"var(--normal-text)\",\n                paddingBottom: \"1em\",\n                maxWidth: \"450px\",\n              }}\n            ><img\n                style={{\n                  marginTop: \"1em\",\n                  maxWidth: \"100%\",\n                }}\n                src=\"/config/images/logo.png\"\n                alt=\"Kensho\" />\n\n              <p\n                style={{\n                  marginTop: \"1em\",\n                }}\n              >Kensho is the latest high-quality NFT collection created by NFT Club. After minting your Kenshos, you can stake them at <StyledLink target={\"_blank\"} href=\"https://app.nftclub.cash\">app.nftclub.cash</StyledLink> to generate passive income of NFTC tokens.\n              </p>\n              <p\n                style={{\n                  marginTop: \"1em\",\n                }}\n              >\n                <s.SpacerLarge />\n\n                <StyledImg alt={\"preview\"} src={\"/config/images/preview.gif\"} />\n              </p>\n            </s.TextDescription>\n            <s.SpacerLarge />\n            {new Date() < new Date(CONFIG.LAUNCH_DATE) ? (\n              <s.TextTitle\n                style={{\n                  textAlign: \"center\",\n                  fontSize: 24,\n                  color: \"var(--normal-text)\",\n                }}\n              >\n                Stay tuned! The {CONFIG.NFT_NAME} NFT collection is launching soon — only on SmartBCH!\n              </s.TextTitle>\n            ) : (\n              <>\n                <s.TextTitle\n                  style={{\n                    textAlign: \"center\",\n                    fontSize: 32,\n                    fontWeight: \"bold\",\n                    fontFamily: \"Liberation Mono\",\n                    color: \"var(--highlighted-text)\",\n                  }}\n                >\n                  {nftData.mintedWithNftc} / {CONFIG.MAX_SUPPLY_NFTC} minted with NFTC\n                </s.TextTitle>\n                <s.TextTitle\n                  style={{\n                    textAlign: \"center\",\n                    fontSize: 32,\n                    fontWeight: \"bold\",\n                    fontFamily: \"Liberation Mono\",\n                    color: \"var(--highlighted-text)\",\n                  }}\n                >\n                  {nftData.mintedWithBch} / {CONFIG.MAX_SUPPLY_BCH} minted with BCH\n                </s.TextTitle>\n              </>\n            )}\n\n            <s.SpacerSmall />\n            <s.TextDescription\n              style={{\n                textAlign: \"center\",\n                fontFamily: \"Liberation Mono\",\n                color: \"var(--normal-text)\",\n              }}\n            >\n              {CONFIG.TOKEN_CONTRACT_ADDRESS !== CONFIG.NFT_CONTRACT_ADDRESS ? (\n                <StyledLink target={\"_blank\"} href={CONFIG.SCAN_LINK}>\n                  {CONFIG.NFT_NAME} CA: {truncate(CONFIG.NFT_CONTRACT_ADDRESS, 15)}\n                </StyledLink>\n              ) : null}\n            </s.TextDescription>\n            <s.SpacerSmall />\n\n\n            {Number(nftData.totalSupply) >= CONFIG.MAX_SUPPLY ? (\n              <>\n                <s.TextTitle\n                  style={{ textAlign: \"center\", color: \"var(--big-text)\" }}\n                >\n                  The sale has ended.\n                </s.TextTitle>\n                <s.TextDescription\n                  style={{ textAlign: \"center\", color: \"var(--big-text)\" }}\n                >\n                  You can still find {CONFIG.NFT_NAME} on\n                </s.TextDescription>\n                <s.SpacerSmall />\n                <StyledLink target={\"_blank\"} href={CONFIG.MARKETPLACE_LINK}>\n                  {CONFIG.MARKETPLACE}\n                  <img style={{\n                    width: \"192px\",\n                  }} src=\"/oasis_logo.svg\" alt=\"Oasis\" />\n                </StyledLink>\n              </>\n            ) : (\n              <>\n                <s.SpacerSmall />\n                <s.TextTitle\n                  style={{ textAlign: \"center\", color: \"var(--highlighted-text)\" }}\n                >\n                  2,000 {CONFIG.SYMBOL} can be minted for {CONFIG.DISPLAY_COST_NFTC}{\" \"}\n                  NFTC per NFT.\n                </s.TextTitle>\n                <s.TextTitle\n                  style={{ textAlign: \"center\", color: \"var(--highlighted-text)\" }}\n                >\n                  10,000 {CONFIG.SYMBOL} can be minted for {CONFIG.DISPLAY_COST_BCH}{\" \"}\n                  {CONFIG.NETWORK.SYMBOL} per NFT.\n                </s.TextTitle>\n\n                <s.SpacerLarge />\n                {blockchain.account === \"\" ||\n                  blockchain.nftSmartContract === null ? (\n                  <s.Container ai={\"center\"} jc={\"center\"}>\n                    <s.TextDescription\n                      style={{\n                        textAlign: \"center\",\n                        color: \"var(--normal-text)\",\n                      }}\n                    >\n                      Please connect MetaMask to the {CONFIG.NETWORK.NAME} network and then connect to this website.\n                    </s.TextDescription>\n                    <s.SpacerSmall />\n                    <s.TextDescription\n                      style={{\n                        textAlign: \"center\",\n                        color: \"var(--normal-text)\",\n                      }}\n                    >\n                      If you are on a computer, please unlock your MetaMask browser extension first and then refresh this page before clicking the CONNECT button.\n                    </s.TextDescription>\n                    <s.SpacerSmall />\n                    <s.TextDescription\n                      style={{\n                        textAlign: \"center\",\n                        color: \"var(--normal-text)\",\n                      }}\n                    >\n                      You can mint up to {CONFIG.MAX_MINT_PER_TX} NFTs per transaction. The NFTs are minted in a non-sequential, randomised order.\n                    </s.TextDescription>\n\n                    <s.SpacerLarge />\n                    <s.SpacerSmall />\n                    <StyledButton\n                      onClick={(e) => {\n                        e.preventDefault();\n                        dispatch(connect());\n                        getNftAndTokenData();\n                      }}\n                    >\n                      CONNECT\n                    </StyledButton>\n                    {blockchain.errorMsg !== \"\" ? (\n                      <>\n                        <s.SpacerSmall />\n                        <s.TextDescription\n                          style={{\n                            textAlign: \"center\",\n                            color: \"var(--big-text)\",\n                          }}\n                        >\n                          {blockchain.errorMsg}\n                        </s.TextDescription>\n                      </>\n                    ) : null}\n                  </s.Container>\n                ) : (\n                  <>\n                    {new Date() > new Date(CONFIG.LAUNCH_DATE) ? (\n                      <s.TextDescription\n                        style={{\n                          textAlign: \"center\",\n                          color: \"var(--big-text)\",\n                        }}\n                      >\n                        {feedback}\n                      </s.TextDescription>\n                    ) : null}\n\n\n                    {/* {new Date() < new Date(CONFIG.END_DATE) ? ( */}\n                    {new Date() > new Date(CONFIG.LAUNCH_DATE) ? (\n                      <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\n                        <s.SpacerMedium />\n                        <StyledRoundButton\n                          style={{ lineHeight: 0.4 }}\n                          disabled={claimingNft ? 1 : 0}\n                          onClick={(e) => {\n                            e.preventDefault();\n                            decrementMintAmount();\n                          }}\n                        >\n                          -\n                        </StyledRoundButton>\n                        <s.SpacerMedium />\n                        <s.TextDescription\n                          style={{\n                            textAlign: \"center\",\n                            color: \"var(--highlighted-text)\",\n                          }}\n                        >\n                          <input type={\"number\"} style={{ width: \"50px\", padding: \"5px\" }} value={mintAmount} onChange={setMintAmountInput} />\n                        </s.TextDescription>\n                        <s.SpacerMedium />\n                        <StyledRoundButton\n                          disabled={claimingNft ? 1 : 0}\n                          onClick={(e) => {\n                            e.preventDefault();\n                            incrementMintAmount();\n                          }}\n                        >\n                          +\n                        </StyledRoundButton>\n                      </s.Container>\n                    ) : null}\n                    <s.SpacerSmall />\n                    {/* {new Date() < new Date(CONFIG.END_DATE) ? ( */}\n                    {new Date() > new Date(CONFIG.LAUNCH_DATE) ? (\n                      <>\n                        <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\n                          <StyledButton\n                            disabled={claimingNft ? 1 : 0}\n                            onClick={(e) => {\n                              e.preventDefault();\n                              claimNFTsWithBCH();\n                              getNftData();\n                            }}\n                          >\n                            {claimingNft ? \"BUSY\" : \"MINT with BCH\"}\n                          </StyledButton>\n                        </s.Container>\n                        <s.SpacerLarge />\n\n                        {/* <s.TextDescription\n                                    style={{\n                                      textAlign: \"center\",\n                                      color: \"var(--normal-text)\",\n                                    }}\n                                  >\n                                    NFTC token address: {CONFIG.TOKEN_CONTRACT_ADDRESS}\n                                  </s.TextDescription> */}\n                        <s.TextDescription\n                          style={{\n                            textAlign: \"center\",\n                            color: \"var(--normal-text)\",\n                          }}\n                        >\n                          Your NFTC balance: {Number(tokenData.tokenBalance) / 10 ** 18}\n                        </s.TextDescription>\n\n\n                        {/* <s.TextDescription\n                                    style={{\n                                      textAlign: \"center\",\n                                      color: \"var(--normal-text)\",\n                                    }}\n                                  >\n                                    NFTC approved: {Number(tokenData.tokensApproved) / 10 ** 18}\n                                  </s.TextDescription> */}\n                        <s.TextDescription\n                          style={{\n                            textAlign: \"center\",\n                            color: \"var(--normal-text)\",\n                          }}\n                        >\n                          NFTs mintable with NFTC: {Math.floor(Number(tokenData.tokensApproved) / 10 ** 18 / 850)}\n                        </s.TextDescription>\n                        <s.SpacerSmall />\n\n                        <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\n                          <s.SpacerMedium />\n                          <StyledButton\n                            disabled={approvedToken ? 1 : 0}\n                            onClick={(e) => {\n                              e.preventDefault();\n                              approveNftc();\n                            }}\n                          >\n                            {approvingToken ? \"BUSY\" : \"APPROVE NFTC\"}\n                          </StyledButton>\n                          <s.SpacerSmall />\n                          <StyledButton\n                            disabled={claimingNft ? 1 : 0}\n                            onClick={(e) => {\n                              e.preventDefault();\n                              claimNFTsWithNFTC();\n                            }}\n                          >\n                            {claimingNft ? \"BUSY\" : \"MINT with NFTC\"}\n                          </StyledButton>\n                        </s.Container>\n                      </>\n                    ) : (\n                      <s.TextDescription\n                        style={{\n                          textAlign: \"center\",\n                          fontSize: 28,\n                          color: \"var(--big-text)\",\n                        }}\n                      >\n                        The minting begins {new Date(CONFIG.LAUNCH_DATE).toUTCString()}.\n                        {/* The minting ended {new Date(CONFIG.END_DATE).toUTCString()}. */}\n                      </s.TextDescription>\n                    )}\n                  </>\n                )}\n              </>\n            )}\n\n\n            {/* {new Date() < new Date(CONFIG.END_DATE) ? (\n            <s.TextDescription\n                      style={{\n                        textAlign: \"center\",\n                        fontSize: 28,\n                        color: \"var(--big-text)\",\n                      }}\n                    >\n                      Minting is possible until {new Date(CONFIG.END_DATE).toUTCString()}.\n                    </s.TextDescription>\n                    ) : (\n                      null\n                    )} */}\n            <div className=\"countdown\" style={{\n              textAlign: \"center\",\n              fontSize: 48,\n              fontWeight: \"bold\",\n              fontFamily: \"Liberation Mono\",\n              color: \"var(--big-text)\",\n            }}>\n              {/* <Countdown\n                date={new Date(CONFIG.END_DATE)}\n              >\n                <Completionist />\n              </Countdown> */}\n\n              <Countdown\n                date={new Date(CONFIG.LAUNCH_DATE)}\n              >\n                <Completionist />\n              </Countdown>\n            </div>\n            <s.Container jc={\"center\"} ai={\"center\"} style={{ width: \"90%\" }}>\n              <s.SpacerLarge />\n              <s.TextDescription\n                style={{\n                  textAlign: \"center\",\n                  color: \"var(--muted-text)\",\n                }}\n              >\n                The gas limit is set to {CONFIG.GAS_LIMIT} to ensure a successful mint. It is recommended NOT to lower the\n                gas limit, because the minting may fail with a lower gas limit. Unused gas is automatically returned to your wallet.\n              </s.TextDescription>\n              <s.SpacerSmall />\n              <s.TextDescription\n                style={{\n                  textAlign: \"center\",\n                  fontSize: 20,\n                  color: \"var(--highlighted-text)\",\n                }}\n              >\n                Please note: Once you make the purchase, you cannot undo this action.\n              </s.TextDescription>\n              <s.SpacerLarge />\n              <s.Container flex={1} jc={\"center\"} ai={\"center\"}>\n                <StyledImg alt={\"preview\"} src={\"/config/images/preview.gif\"} />\n              </s.Container>\n            </s.Container>\n            <s.SpacerLarge />\n            <s.Container\n              jc={\"center\"}\n              ai={\"center\"}\n              style={{\n                margin: \"0\",\n                padding: \"0\",\n                color: \"#efefef\",\n              }}\n            >\n              {/* <a href=\"https://github.com/zquestz/reapers.cash\" target=\"_blank\"><img src=\"/github-alt-brands.svg\" /></a> */}\n              <div className=\"social\">\n                <a href=\"https://t.me/NFTClubOfficial\" target=\"_blank\"><img src=\"/telegram-plane-brands.svg\" /></a>\n                <a href=\"https://twitter.com/PixelGuyClub1\" target=\"_blank\"><img src=\"/twitter-brands.svg\" /></a>\n                <a href=\"https://www.instagram.com/nft_club_official/\" target=\"_blank\"><img src=\"/instagram-brands.svg\" /></a>\n                <a href=\"https://app.nftclub.cash\" target=\"_blank\"><img src=\"/bch.svg\" /></a>\n              </div>\n            </s.Container>\n          </s.Container>\n          {/* <s.SpacerLarge />\n          <s.Container flex={1} jc={\"center\"} ai={\"center\"}>\n            <StyledImg\n              alt={\"preview\"}\n              src={\"/config/images/preview.gif\"}\n            />\n          </s.Container> */}\n        </ResponsiveWrapper>\n\n      </s.Container>\n\n    </s.Screen>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./styles/reset.css\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}